1) query related rules
2) from_clause, where_clause, etc.
3) orderings
4) attributes - need to remove attributes_opt if finalised!

5) Removed EXTERN ALIAS DIRECTIVES, this statements are used to import 'dynamically linked libraries in your program'

# def p_extern_alias_directives(p):
# 	"""extern_alias_directives : extern_alias_directive
# 				| extern_alias_directives extern_alias_directive
# 	"""


# def p_extern_alias_directive(p):
# 	"""extern_alias_directive : EXTERN "alias" IDENTIFIER STMT_TERMINATOR
# 	"""

# def p_nullable_type(p):
# 	"""nullable_type : non_nullable_value_type CONDOP
# 	"""


# def p_non_nullable_value_type(p):
# 	"""non_nullable_value_type : type
# 	"""


# def p_enum_type(p):
# 	"""enum_type : type_name
# 	"""
# def p_global_attributes(p):
# 	"""global_attributes : global_attribute_sections
# 	"""

# def p_global_attribute_sections(p):
# 	"""global_attribute_sections : global_attribute_section
# 				| global_attribute_sections global_attribute_section
# 	"""

# def p_global_attribute_section(p):
# 	"""global_attribute_section : LBRACKET global_attribute_target_specifier attribute_list RBRACKET
# 				| LBRACKET global_attribute_target_specifier attribute_list COMMA RBRACKET
# 	"""

# def p_global_attribute_target_specifier(p):
# 	"""global_attribute_target_specifier : global_attribute_target COLON
# 	"""


# def p_global_attribute_target(p):
# 	"""global_attribute_target : "assembly"
# 				| "module"
# 	"""

# def p_attribute_list(p):
# 	"""attribute_list : attribute
# 				| attribute_list COMMA attribute
# 	"""

# def p_attribute(p):
# 	"""attribute : attribute_name attribute_arguments_opt
# 	"""

# def p_attribute_name(p):
# 	"""attribute_name : type_name
# 	"""

# def p_attribute_arguments(p):
# 	"""attribute_arguments : LPAREN positional_argument_list_opt RPAREN
# 				| LPAREN positional_argument_list COMMA named_argument_list RPAREN
# 				| LPAREN named_argument_list RPAREN
# 	"""

# def p_positional_argument_list(p):
# 	"""positional_argument_list : positional_argument
# 				| positional_argument_list COMMA positional_argument
# 	"""

# def p_positional_argument(p):
# 	"""positional_argument : argument_name_opt attribute_argument_expression
# 	"""



# def p_attribute_argument_expression(p):
# 	"""attribute_argument_expression : expression
# 	"""

# def p_checked_expression(p):
# 	"""checked_expression : "checked" LPAREN expression RPAREN
# 	"""

# def p_unchecked_expression(p):
# 	"""unchecked_expression : "unchecked" LPAREN expression RPAREN
# 	"""

# def p_anonymous_function_parameter_modifier(p):
# 	"""anonymous_function_parameter_modifier : REF
# 				| OUT
# 	"""

# def p_labeled_statement(p):
# 	"""labeled_statement: IDENTIFIER COLON statement
# 	"""

# def p_foreach_statement(p):
# 	"""foreach_statement : "foreach" LPAREN local_variable_type IDENTIFIER IN expression RPAREN embedded_statement
# 	"""

# def p_throw_statement(p):
# 	"""throw_statement : "throw" expression_opt STMT_TERMINATOR
# 	"""

# def p_try_statement(p):
# 	"""try_statement : "try" block catch_clauses
# 				| "try" block finally_clause
# 				| "try" block catch_clauses finally_clause
# 	"""

# def p_catch_clauses(p):
# 	"""catch_clauses : specific_catch_clauses general_catch_clause_opt
# 				| specific_catch_clauses_opt general_catch_clause
# 	"""

# def p_specific_catch_clauses(p):
# 	"""specific_catch_clauses : specific_catch_clause
# 				| specific_catch_clauses specific_catch_clause
# 	"""

# def p_specific_catch_clause(p):
# 	"""specific_catch_clause : "catch" LPAREN class_type IDENTIFIER_opt RPAREN block
# 	"""

# def p_general_catch_clause(p):
# 	"""general_catch_clause : "catch" block
# 	"""

# def p_finally_clause(p):
# 	"""finally_clause : "finally" block
# 	"""

# def p_checked_statement(p):
# 	"""checked_statement : "checked" block
# 	"""

# def p_unchecked_statement(p):
# 	"""unchecked_statement : "unchecked" block
# 	"""

# def p_lock_statement(p):
# 	"""lock_statement : "lock" LPAREN expression RPAREN embedded_statement
# 	"""

# def p_using_statement(p):
# 	"""using_statement : USING LPAREN resource_acquisition RPAREN embedded_statement
# 	"""

# def p_resource_acquisition(p):
# 	"""resource_acquisition : local_variable_declaration
# 				| expression
# 	"""

# def p_yield_statement(p):
# 	"""yield_statement : "yield" RETURN expression STMT_TERMINATOR
# 				| "yield" BREAK STMT_TERMINATOR
# 	"""

# def p_right_shift(p):
# 	"""right_shift : RSHIFT
# 	"""

# def p_query_expression(p):
# 	"""query_expression : from_clause query_body
# 	"""

# def p_from_clause(p):
# 	"""from_clause : "from" type_opt IDENTIFIER IN expression
# 	"""

# def p_query_body(p):
# 	"""query_body : query_body_clauses_opt select_or_group_clause query_continuation_opt
# 	"""

# def p_query_body_clauses(p):
# 	"""query_body_clauses : query_body_clause
# 				| query_body_clauses query_body_clause
# 	"""

# def p_query_body_clause(p):
# 	"""query_body_clause : from_clause
# 				| let_clause
# 				| where_clause
# 				| join_clause
# 				| join_into_clause
# 				| orderby_clause
# 	"""

# def p_let_clause(p):
# 	"""let_clause : "let" IDENTIFIER EQUALS expression
# 	"""

# def p_where_clause(p):
# 	"""where_clause : "where" boolean_expression
# 	"""

# def p_join_clause(p):
# 	"""join_clause : "join" type_opt IDENTIFIER IN expression "on" expression "equals" expression
# 	"""

# def p_join_into_clause(p):
# 	"""join_into_clause : "join" type_opt IDENTIFIER IN expression "on" expression "equals" expression "into" IDENTIFIER
# 	"""

# def p_orderby_clause(p):
# 	"""orderby_clause : "orderby" orderings
# 	"""

# def p_orderings(p):
# 	"""orderings : ordering
# 				| orderings COMMA ordering
# 	"""

# def p_ordering(p):
# 	"""ordering : expression ordering_direction_opt
# 	"""

# def p_ordering_direction(p):
# 	"""ordering_direction : "ascending"
# 				| "descending"
# 	"""

# def p_select_or_group_clause(p):
# 	"""select_or_group_clause : select_clause
# 				| group_clause
# 	"""

# def p_select_clause(p):
# 	"""select_clause : "select" expression
# 	"""

# def p_group_clause(p):
# 	"""group_clause : "group" expression "by" expression
# 	"""

# def p_query_continuation(p):
# 	"""query_continuation : "into" IDENTIFIER query_body
# 	"""

# def p_named_argument_list(p):
# 	"""named_argument_list : named_argument
# 				| named_argument_list COMMA named_argument
# 	"""

# def p_named_argument(p):
# 	"""named_argument : IDENTIFIER EQUALS attribute_argument_expression
# 	"""

# def p_attributes(p):
# 	"""attributes : attribute_sections
# 	"""

# def p_attribute_sections(p):
# 	"""attribute_sections : attribute_section
# 				| attribute_sections attribute_section
# 	"""

# def p_attribute_section(p):
# 	"""attribute_section : LBRACKET attribute_target_specifier_opt attribute_list RBRACKET
# 				| LBRACKET attribute_target_specifier_opt attribute_list COMMA RBRACKET
# 	"""

# def p_attribute_target_specifier(p):
# 	"""attribute_target_specifier:
# 				| attribute_target COLON
# 	"""


# def p_attribute_target(p):
# 	"""attribute_target : "field"
# 				| "event"
# 				| "method"
# 				| "param"
# 				| "property"
# 				| RETURN
# 				| type
# 	"""

opt_rules = [
	'class_member_declarations',
	'struct_member_declarations',
	'verbatim_string_literal_characters',
	'interface_base',
	'new',
	'expression',
	'identifier_part_characters',
	'integer_type_suffix',
	'enum_modifiers',
	'interface_member_declarations',
	'statement_list',
	'argument_list',
	'dim_separators',
	'array_initializer',
	'hex_digit',
	'constant_modifiers',
	'pp_else_section',
	'formal_parameter_list',
	'variable_initializer_list',
	'exponent_part',
	'delegate_modifiers',
	'regular_string_literal_characters',
	'IDENTIFIER',
	'parameter_modifier',
	'enum_base',
	'namespace_member_declarations',
	'method_modifiers',
	'conditional_section',
	'constructor_initializer',
	'skipped_characters',
	'struct_modifiers',
	'constructor_modifiers',
	'positional_argument_list',
	'switch_sections',
	'pp_elif_sections',
	'for_condition',
	'using_directives',
	'rank_specifiers',
	'interface_modifiers',
	'unsafe',
	'input_characters',
	'class_base',
	'indexer_modifiers',
	'enum_member_declarations',
	'property_modifiers',
	'class_modifiers',
	'set_accessor_declaration',
	'input_section',
	'extern',
	'field_modifiers',
	'whitespace',
	'get_accessor_declaration',
	'real_type_suffix',
	';',
	'struct_interfaces',
	'sign',
	'single_line_comment',
	'event_modifiers',
	'for_iterator',
	'for_initializer',
	'delimited_comment_characters',
	'input_elements'
]

for rule in opt_rules:
	create_opt_rule(rule)

def p_using_alias_directive(p):
	"""using_alias_directive : USING IDENTIFIER EQUALS namespace_or_type_name STMT_TERMINATOR
	"""

def p_qualified_alias_member(p):
	"""qualified_alias_member : IDENTIFIER "::" IDENTIFIER type_argument_list_opt
	"""

def p_type_arguments(p):
	"""type_arguments : type_argument
				| type_arguments COMMA type_argument
	"""

def p_interface_type_list(p):
	"""interface_type_list : interface_type
				| interface_type_list COMMA interface_type
	"""

def p_variance_annotation(p):
	"""variance_annotation : IN
				| OUT
	"""

delegates

def p_property_declaration(p):
	"""property_declaration :  property_modifiers_opt type member_name LBRACE accessor_declarations RBRACE
	"""

def p_accessor_declarations(p):
	"""accessor_declarations : get_accessor_declaration set_accessor_declaration_opt
				| set_accessor_declaration get_accessor_declaration_opt
	"""

def p_get_accessor_declaration(p):
	"""get_accessor_declaration :  accessor_modifier_opt GET accessor_body
	"""

def p_set_accessor_declaration(p):
	"""set_accessor_declaration :  accessor_modifier_opt SET accessor_body
	"""

def p_event_declaration(p):
	"""event_declaration :  event_modifiers_opt EVENT type variable_declarators STMT_TERMINATOR
				|  event_modifiers_opt EVENT type member_name LBRACE event_accessor_declarations RBRACE
	"""

def p_event_accessor_declarations(p):
	"""event_accessor_declarations : add_accessor_declaration remove_accessor_declaration
				| remove_accessor_declaration add_accessor_declaration
	"""

def p_add_accessor_declaration(p):
	"""add_accessor_declaration :  ADD block
	"""

def p_remove_accessor_declaration(p):
	"""remove_accessor_declaration :  REMOVE block
	"""

def p_indexer_declaration(p):
	"""indexer_declaration :  indexer_modifiers_opt indexer_declarator LBRACE accessor_declarations RBRACE
	"""

def p_event_modifiers(p):
	"""event_modifiers : event_modifier
				| event_modifiers event_modifier
	"""

def p_event_modifier(p):
	"""event_modifier : NEW
				| PUBLIC
				| PROTECTED
				| INTERNAL
				| PRIVATE
				| STATIC
				| VIRTUAL
				| SEALED
				| OVERRIDE
				| ABSTRACT
				| EXTERN
	"""

def p_indexer_modifiers(p):
	"""indexer_modifiers : indexer_modifier
				| indexer_modifiers indexer_modifier
	"""

def p_indexer_modifier(p):
	"""indexer_modifier : NEW
				| PUBLIC
				| PROTECTED
				| INTERNAL
				| PRIVATE
				| VIRTUAL
				| SEALED
				| OVERRIDE
				| ABSTRACT
				| EXTERN
	"""

def p_indexer_declarator(p):
	"""indexer_declarator : type THIS LBRACKET formal_parameter_list RBRACKET
	"""